.. _tutorial:

============
Tutorial
============

After installation, **PyZFS** can be executed in two manners:

1. Construct WavefunctionLoader and ZFSCalculation loader from within Python terminal or Jupyter notebook, and call ZFSCalculation.solve to perform the calculation.
   
   An example Python script for computing the ZFS tensor for oxygen molecule is shown below. */path/to/o2.xml* should be replaced by the path to the *pyzfs/examples/o2_qbox_xml/o2.xml* file in the **PyZFS** folder.
   
   .. code:: python

      >>> from pyzfs.common.wfc.qboxloader import QboxWavefunctionLoader
      >>> from pyzfs.zfs.main import ZFSCalculation
      >>> wfcloader = QboxWavefunctionLoader(filename='/path/to/o2.xml')  # Construct wavefunction loader
      >>> zfscalc = ZFSCalculation(wfcloader=wfcloader)  # Set up ZFS calculation
      >>> zfscalc.solve()  # Perform ZFS calculation

   Example Jupyter notebooks can be found at /examples/o2_qbox_xml/run.ipynb and /examples/o2_qe_hdf5/run.ipynb.

2. Directly execute **PyZFS**. This approach works more smoothly with MPI.
   
   For serial execution, simply type the following command in the folder that contains DFT wavefunction file(s)

   .. code:: bash

      $ pyzfs [--flags]

   For parallel execution, use the following command

   .. code:: bash

      $ mpiexec [-n num_of_processes] pyzfs [--flags]

   where *num_of_processes* is the number of processes. **PyZFS** distributes the calculations on a square grid of processes. If *num_of_processes* is not a square number, **PyZFS** will use the largest square number of processes smaller than *num_of_processes* for calculations.

   Note that to use the above `pyzfs` command, one needs to install **PyZFS** through **pip** (see :ref:`installation`). If one manually added **PyZFS** directory to the **PYTHONPATH** without installing it, one needs to replace the above commands with

   .. code:: bash

      $ python -m pyzfs.exec.runzfs [--flags]

   and

   .. code:: bash

      $ mpiexec [-n num_of_processes] python -m pyzfs.exec.runzfs [--flags]

   Acceptable flags [--flags] are listed below, for detailed explanation see *pyzfs/exec/runzfs.py*.

   - `path`: working directory for this calculation. Python will first change the working dir before any calculations. Default is ".".

   - `wfcfmt`: format of input wavefunction. Default is "qeh5". Supported values are:

      - "qeh5": Quantum Espresso HDF5 save file. path should contains "prefix.xml" and save folder.
      - "qe": Quantum Espresso (v6.1) save file. path should be the save folder that contains "data-files.xml", etc.
      - "qbox": Qbox xml file.
      - "cube-wfc": cube files of (real) wavefunctions (Kohn-Sham orbitals).
      - "cube-density": cube files of (signed) squared wavefunction, this option is to support `pp.x` output with `plot_num = 7` and `lsign = .TRUE.`.

   - `filename`: name of the Qbox sample XML file that contains input wavefunction. Only used if `wfcfmt = "qbox"`.

   - `fftgrid`: FFT grid used. Supported values are "density" or "wave". If "wave" is specified, use a reduced FFT grid to perform calculations. Default is "wave".

   - `memory`: "high", "low" or "critical". See ZFSCalculation documentation. Default is "critical".

   An example execution command for Quantum Espresso HDF5 save file is

   .. code:: bash

      $ mpiexec pyzfs --wfcfmt qeh5 --prefix pwscf

   where pwscf is the prefix used for the Quantum Espresso calculation.

   An example execution command for Qbox XML save file is

   .. code:: bash

      $ mpiexec pyzfs --wfcfmt qbox --filename gs.xml

   where gs.xml is the XML save file generated by Qbox.

See *pyzfs/examples* for examples of computing the ZFS tensor for the oxygen molecule and the nitrogen-vacancy (NV) center in diamond.
